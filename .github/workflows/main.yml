# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the workflow will run
on:  ## ENVENTOS
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:  # permite que eu execute manualmente meu workflow, nao vou usar agora

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  CI: # nome do JOB
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Action: Docker login
      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PWD }}

      # Action: Build and push Docker images
      - name: Build and push Docker images
        uses: docker/build-push-action@v2.6.1
        with:
          context: ./src
          # Path to the Dockerfile
          
          file: ./src/Dockerfile
          # List of metadata for an image
          
          push: true
          
          tags: |
            darianbeluzzo/rotten-potatoes:latest
            darianbeluzzo/rotten-potatoes:${{ github.run_number }}
          # assim eu garanto que eu sempre tenho uma tag diferente
          
  CD: # nome do JOB
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [CI] # Register that CD depends on the CI being completed 
    
   # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Kubernetes set context. # AKA connect to the cluster
        uses: Azure/k8s-set-context@v1.1
        with:
          # Acceptable values: generic or arc
          cluster-type: generic # default is generic
          
          # Acceptable values: kubeconfig or service-account or service-principal
          method: kubeconfig
          # Kubernetes Config
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      # Deploy to Kubernetes cluster  AKA Deploy, our apply locally
      - name: Deploy Mongo
        uses: Azure/k8s-deploy@v1
        with:
          # Path to the manifest files which will be used for deployment.
          manifests: |
            k8s/mongodb/deployment.yaml
            
      # Deploy to Kubernetes cluster  AKA Deploy, our apply locally
      - name: Deploy Web API
        uses: Azure/k8s-deploy@v1
        with:
          # Path to the manifest files which will be used for deployment.
          manifests: |
            k8s/web/deployment.yaml
          
          # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          images: darianbeluzzo/rotten-potatoes:${{ github.run_number }}
          